$date
	Sun Apr 03 15:15:37 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module qmult_tf $end
$var wire 32 ! c [31:0] $end
$var reg 32 " a [31:0] $end
$var reg 32 # b [31:0] $end
$scope module uut $end
$var wire 32 $ a [31:0] $end
$var wire 32 % b [31:0] $end
$var wire 32 & c [31:0] $end
$var wire 64 ' r_ext [63:0] $end
$var wire 64 ( b_ext [63:0] $end
$var wire 64 ) a_ext [63:0] $end
$var reg 64 * a_mult [63:0] $end
$var reg 64 + b_mult [63:0] $end
$var reg 64 , result [63:0] $end
$var reg 32 - retVal [31:0] $end
$scope module comp_a $end
$var wire 31 . a [30:0] $end
$var wire 64 / b [63:0] $end
$var reg 64 0 data [63:0] $end
$var reg 64 1 flip [63:0] $end
$var reg 64 2 out [63:0] $end
$upscope $end
$scope module comp_b $end
$var wire 31 3 a [30:0] $end
$var wire 64 4 b [63:0] $end
$var reg 64 5 data [63:0] $end
$var reg 64 6 flip [63:0] $end
$var reg 64 7 out [63:0] $end
$upscope $end
$scope module comp_r $end
$var wire 31 8 a [30:0] $end
$var wire 64 9 b [63:0] $end
$var reg 64 : data [63:0] $end
$var reg 64 ; flip [63:0] $end
$var reg 64 < out [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1111111111111111111111111111111111000101111000000000000000000000 <
b1111111111111111111111111111111111000101110111111111111111111111 ;
b111010001000000000000000000000 :
b1111111111111111111111111111111111000101111000000000000000000000 9
b111010001000000000000000000000 8
b1111111111111111111111111111111111111100010000000000000000000000 7
b1111111111111111111111111111111111111100001111111111111111111111 6
b11110000000000000000000000 5
b1111111111111111111111111111111111111100010000000000000000000000 4
b11110000000000000000000000 3
b1111111111111111111111111111111111111000010000000000000000000000 2
b1111111111111111111111111111111111111000001111111111111111111111 1
b111110000000000000000000000 0
b1111111111111111111111111111111111111000010000000000000000000000 /
b111110000000000000000000000 .
b111010001000000000000000000000 -
b11101000100000000000000000000000000000000000000000000 ,
b1111111111111111111111111111111111111100010000000000000000000000 +
b1111111111111111111111111111111111111000010000000000000000000000 *
b1111111111111111111111111111111111111000010000000000000000000000 )
b1111111111111111111111111111111111111100010000000000000000000000 (
b1111111111111111111111111111111111000101111000000000000000000000 '
b111010001000000000000000000000 &
b10000011110000000000000000000000 %
b10000111110000000000000000000000 $
b10000011110000000000000000000000 #
b10000111110000000000000000000000 "
b111010001000000000000000000000 !
$end
#10000
